package report

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	ci "github.com/RobertKielty/flake-tracker/pkg/cistatus"
)

// daysAgo returns number of days since time t
// used for reported entities and states have existed
func daysAgo(t time.Time) int {
	return int(time.Since(t).Hours() / 24)
}

func dashboardJobCount(ciStatus ci.CiStatus) int {
	return len (ciStatus.FlakingJobs) + len(ciStatus.FailedJobs) + len(ciStatus.PassingJobs)
}

func dumpStruct(s interface{}) string {
	return fmt.Sprintf("%+v",s)
}

const mdTemplate = `## CI Signal
Generated by [flake-tracker](https://github.com/RobertKielty/flake-tracker)
[{{.Name}}](https://testgrid.8s.io/{{.Name}})
### Overview
Failing {{len .FailedJobs}}
Flaking {{len .FlakingJobs}}
Passing {{len .PassingJobs}}
TOTAL # {{dashboardJobCount .}}:
### Flaking Jobs

{{range $k, $v := .FlakingJobs}}
#### [{{$k}}]({{$v.Url}})
{{range $i, $j := $v.JobTestResults.Tests}}
- {{$j.Sig}} {{$j.Name}}
{{dumpStruct $j}}
{{range $m, $reported := $j.LinkedBugs}}
-- {{$m}} {{$reported}}
{{end}}
{{end}}
{{end}}`

// runs a lreport against on the jobs in tab group status summary for jobs
// that are flaking, failed and passing
// Summary report overall summary in Markdown for ciStatus
func RunMarkdownSummaryReport(ciStatus ci.CiStatus) {

	funcMap := template.FuncMap{
		"daysAgo":daysAgo,
		"dashboardJobCount":dashboardJobCount,
		"dumpStruct":dumpStruct,
	}

	var tmplName = "mdTemplate"
	tmpl, err := template.New(tmplName).Funcs(funcMap).Parse(mdTemplate)

	if err != nil {
		log.Fatalf("Error parsing %s : %s", tmplName, err)
	}

	// Run the template to verify the output.
	err = tmpl.Execute(os.Stdout, ciStatus)
	if err != nil {
		log.Fatalf("Error executing report %s", err)
	}

}
