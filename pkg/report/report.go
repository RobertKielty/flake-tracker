package report

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	ci "github.com/RobertKielty/flake-tracker/pkg/cistatus"
)

// daysAgo returns number of days since time t
// used for reported entities and states have existed
func daysAgo(t time.Time) int {
	return int(time.Since(t).Hours() / 24)
}

func dashboardJobCount(ciStatus ci.CiStatus) int {
	return len (ciStatus.FlakingJobs) + len(ciStatus.FailedJobs) + len(ciStatus.PassingJobs)
}

// dumpStruct outputs the feilds and values of a struct for debugging template{{dumpStruct $j}}
func dumpStruct(s interface{}) string {
	return fmt.Sprintf("%+v",s)
}

const mdTemplate = `
### [{{.Name}}](https://testgrid.k8s.io/{{.Name}})
Generated by [flake-tracker](https://github.com/RobertKielty/flake-tracker) at {{.CollectedAt.Format "Jan 02, 2006 15:04 UTC" }}
Out of {{dashboardJobCount .}} jobs
<span style="background-color:#0f0;foreground-color:#555;padding: 3px;">**PASSING {{len .PassingJobs}}**</span> <span style="background-color:#f00;color:#fff;padding: 3px;">**FAILING {{len .FailedJobs}}**</span> <span style="background-color:#609;color:#fff;padding: 3px;">**FLAKING {{len .FlakingJobs}}**</span>
#### Passing Jobs
<details>
<summary>Expand {{len .PassingJobs}} passing Jobs</summary>
{{range $k, $v := .PassingJobs}}
##### [{{$k}}]({{$v.HumanUrl}})
{{end}}
</details>

#### Flaking Jobs
<details>
<summary>Expand {{len .FlakingJobs}} Flaking Jobs</summary>
{{range $k, $v := .FlakingJobs}}
##### [{{$k}}]({{$v.HumanUrl}})
<details>
<summary>Expand flaking tests</summary>
{{range $i, $j := $v.JobTestResults.Tests}}
1. {{$j.Sig}} {{$j.Name}} {{dumpStruct $j.LinkedBugs}}
{{end}}
</details>
{{end}}
</details>

#### Failing Jobs
<details>
<summary>Expand {{len .FailedJobs}} Failing Jobs</summary>
{{range $k, $v := .FailedJobs}}
##### [{{$k}}]({{$v.HumanUrl}})
<details>
<summary>Expand failed tests</summary>
{{range $i, $j := $v.JobTestResults.Tests}}
1. {{$j.Sig}} {{$j.Name}} {{dumpStruct $j.LinkedBugs}}
{{end}}
</details>
{{end}}
</details>
`

/**
### Linked Issues
{{range $m, $reported := $j.LinkedBugs}}
{{$m}} {{$reported}}
{{end}}
*/
// runs a lreport against on the jobs in tab group status summary for jobs
// that are flaking, failed and passing
// Summary report overall summary in Markdown for ciStatus
func RunMarkdownSummaryReport(ciStatus ci.CiStatus) {

	funcMap := template.FuncMap{
		"daysAgo":daysAgo,
		"dashboardJobCount":dashboardJobCount,
		"dumpStruct":dumpStruct,
	}

	var tmplName = "mdTemplate"
	tmpl, err := template.New(tmplName).Funcs(funcMap).Parse(mdTemplate)

	if err != nil {
		log.Fatalf("Error parsing %s : %s", tmplName, err)
	}

	// Run the template to verify the output.
	err = tmpl.Execute(os.Stdout, ciStatus)
	if err != nil {
		log.Fatalf("Error executing report %s", err)
	}

}
